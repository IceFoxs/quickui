<Control name="Page07">
<prototype>
<TutorialPage title="Compact property definition using property factories">

<h2>Declaring a property using a property factory</h2>
<p>
Defining a control property like Greet.content is so common, the QuickUI framework
includes some JavaScript helper classes to more concisely define common types of properties.
The Greet.content property in this example is a very common type of property:
a control property backed by the contents of a specific HTML element within the control’s DOM.
</p>

<pre>
content: function(value) {
    return $(this.Greet_content).html(value);
}
</pre>

<p>
To facilitate construction of such functions, the QuickUI run-time library includes
a helper class called Element that serves as a factory for functions like the one above.
So we can replace the above property definition with this one:
</p>

<pre>
content: QuickUI.Element("Greet_content").content()
</pre>

<p>
Here, the Element() reference indicates that we want to create a function bound to
the element called “Greet_content”. Furthermore, we want
a function that will set or get the content of that element. Note: the above code does not
immediately return the content of Greet_content; it returns a 
<i>function</i> that can be used later to obtain the content of Greet_content. So the
above code is effectively a late-bound reference to the element we want.
</p>

<p>
Using property factories reduces the amount of code required to define control properties,
and correspondingly reduces the chances for bugs. It also allows someone else reading the
code to clearly see the intent of the property declaration. QuickUI defines several other
property factories for defining common types of control properties. Significantly, this
feature of QuickUI is defined in the run-time library, <i>not</i> in the
Quick markup language, to afford the developer more flexibility.
</p>

<h2>Defining multiple “slots” with additional properties</h2>

<p>
Let’s adapt our Greet control to use the QuickUI.Element() property factory above.
And since it’s so easy to define new control properties, let’s extend our Greet control
with an additional property to control the type of punctuation used at the end of the
greeting:
</p>

<SourceCode sourceFile="Greet.qui" />

<p>
We can then use the new slot like this:
</p>

<SourceCode sourceFile="Sample.qui" />

<p>
This produces:
</p>

<CodeOutput>
	<Sample/>
</CodeOutput>

<p>
Both the control content and the additional punctuation can be set separately.
In this way, you can easily define various “slots” for content which can then be filled in by
consumers of your control. A common use for this is to create templates of various kinds:
templates for chunks of content that vary only in certain places, templates for entire pages,
etc.
</p>


<Link href="/tutorial/section08/default.html">Next ></Link>

</TutorialPage>
</prototype>
</Control>