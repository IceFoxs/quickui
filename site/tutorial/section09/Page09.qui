<Control name="Page09">

<TutorialPage title="Control prototypes">

<p>
As in JavaScript classes, QuickUI controls define their behavior by identifying a
<i>prototype</i> that is used as the starting point for the control.
</p>

<h2>Using the <Tag>prototype</Tag> tag to delineate control content</h2>

<p>
At the start of this tutorial, we defined the Greet control in a compact form:
</p>

<pre>
&lt;Control name="Greet"&gt;
    Hello, world!
&lt;/Control&gt;
</pre>

<p>
In fact, this is just shorthand (on several levels) for an explicit form:
</p>

<pre>
&lt;Control name="Greet"&gt;

&lt;prototype&gt;
    &lt;QuickControl&gt;
        &lt;content&gt;Hello, world!&lt;/content&gt;
    &lt;/QuickControl&gt;
&lt;/prototype&gt;

&lt;/Control&gt;
</pre>

<p>
The <Tag>prototype</Tag> of the Greet class above identifies an object that will
created to serve as the prototype or starting point for new instances of Greet.
The above code can be read as follows: “Define a new QuickUI control class called
Greet whose prototype is an instance of QuickControl. When a new instance of this class
is instantiated, set its content property to the string ‘Hello, world!’”
</p>

<p>
To be clear, a QuickUI prototype is <i>not</i> a JavaScript prototype, although it
is very similar in nature. Like a JavaScript prototype, a QuickUI control prototype
defines a starting point for new instances of the control.
A control’s prototype is built at run time during control instantiation by the render() method
generated by the qc compiler. Once the prototype has been rendered, the render()
method sets additional properties that differentiate the control from its base class,
and give the control its identifying characteristics. In the case of Greet, above,
that means setting the control’s content to a string. The base QuickControl class has no
content of its own; so what sets Greet apart from its QuickControl prototype is that string content.
</p>

<h2>Optional tags</h2>

<p>
The quic compiler gives you flexibility in deciding how explicit you want to be
in coding your control’s prototype. Comparing the two examples above reveals that
all three of the following tags are optional:
</p>

<ul>
	<li>
		The <Tag>prototype</Tag> tag. Any elements inside the outermost <Tag>Control</Tag>
		(and not inside a <Tag>style</Tag> or <Tag>script</Tag> tag)
		are assumed to be the control’s prototype.
	</li>
	<li>
		The inner <Tag>QuickControl</Tag> tag. If the <Tag>prototype</Tag> tag contains
		a single QuickUI class tag, then that class is taken to be the base class
		for the new control. If the <Tag>prototype</Tag> contains multiple elements,
		or a single HTML element, then the new control is assumed to inherit from
		the base QuickControl. class.
	</li>
	<li>
		The <Tag>content</Tag> tag. As discussed earlier, elements within a class tag
		are assumed to set the control’s content() property.
	</li>
</ul>

<p>
It’s up to you to decide when defining a control which of these elements will
improve legibility. In this particular example, we might decide to settle on an intermediate
form like:
</p>

<pre>
&lt;Control name="Greet"&gt;

&lt;prototype&gt;
    Hello, world!
&lt;/prototype&gt;

&lt;/Control&gt;
</pre>

<p>
This is equivalent to the two forms presented above.
</p>

<h2>Applying the <Tag>prototype</Tag> tag to our example</h2>

<p>
We can now include an explicit <Tag>prototype</Tag> tag in our sample Greet control
to (arguably) improve legibility:
</p>

<SourceCode sourceFile="Greet.qui" />

<p>
As a general rule, very simple controls that serve as HTML macros are perhaps easier to read
without explicit use of the <Tag>prototype</Tag> tag or its associated inner tags. When
the top-level <Tag>Control</Tag> tag includes additional child tags, like <Tag>script</Tag>
above, then it seems like inclusion of <Tag>prototype</Tag> can help delineate these
different aspects of the control.
</p>

<Link href="/tutorial/section10/default.html">Next ></Link>

</TutorialPage>

</Control>