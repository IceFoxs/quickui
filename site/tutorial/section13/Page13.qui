<Control name="Page13">
<prototype>
<TutorialPage title="Controlling behavior">

<h2>Defining a property that governs behavior</h2>

<p>
Control properties can do more than simply populate chunks of the control’s contents.
Control properties can also modify the appearance of the control, for example by applying
classes that trigger the application of additional CSS rules. Control properties can also
modify control behavior.
</p>

<p>
If we find there are cases where we don’t want our Greet control to be clickable, we
can govern that behavior by defining a “enabled” property. When this property is set
to false, the control will ignore clicks:
</p>

<SourceCode sourceFile="Greet.qui" />

<p>
The enabled property is defined by calling the helper function QuickUI.Element().applyClass,
which returns a function that adds or removes a CSS class from a named element.
The resulting Greet.enabled() function can be called with no parameters to obtain a boolean
that indicates whether the CSS class is currently applied. Alternatively, a boolean
parameter can be supplied to add the indicated CSS style (if the parameter is true)
or remove the style (if the parameter is false).
</p>

<p>
Here we apply some basic formatting so that a disabled Greet control will not show the
pointer cursor over the main content element. With this in place, our Sample control
can now enable or disable a Greet control through markup. We can leave the first two
<Tag>Greet</Tag> tags alone, but apply the disabled property to the third:
</p>

<SourceCode sourceFile="Sample.qui" />

<p>
With this change, clicking “Alice” or “Bob” will invoke the dialog we defined earlier,
but now clicking “Carol” will not.
</p>

<CodeOutput>
	<Sample/>
</CodeOutput>

<Link href="/tutorial/section14/default.html">Next ></Link>

</TutorialPage>
</prototype>
</Control>