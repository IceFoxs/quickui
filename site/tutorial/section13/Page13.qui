<Control name="Page13">

<TutorialPage title="Controlling behavior">

<h2>Defining a property that governs behavior</h2>

<p>
Control properties can do more than simply populate chunks of the control’s contents.
Control properties can also modify the appearance of the control, for example by applying
classes that trigger the application of additional CSS rules. Control properties can also
modify control behavior.
</p>

<p>
If we find there are cases where we don’t want our Greet control to be clickable, we
can govern that behavior by defining a “disabled” property. When this property is set
to true, the control will ignore clicks:
</p>

<SourceCode sourceFile="Greet.qui" />

<p>
The disabled property is defined by calling the helper function Property.bool(),
which returns a function that can set and get a boolean value. The “get” form always
returns a boolean, but the “set” form can accept a string like “true” or “false”.
This is helpful because QuickUI markup can only define property values as strings,
HTML content, or QuickUI controls.
</p>

<p>
If called with no arguments, Property.bool() will define a plain getter/setter property
function. If, as above, a function is supplied, then this function will be called after
the property has been set. Here we can use this to conditionally apply our cursor style
so that disabled controls do not show the pointer cursor.
</p>

<p>
With this in place, our Sample control can now disable a Greet control through markup.
We can leave the first two <Tag>Greet</Tag> tags alone, but apply the disabled property
to the third:
</p>

<SourceCode sourceFile="Sample.qui" />

<p>
With this change, clicking “Alice” or “Carol” will invoke the dialog we defined earlier,
but now clicking “Bob” will not.
</p>

<CodeOutput>
	<Sample/>
</CodeOutput>

<Link href="/tutorial/section14/default.html">Next ></Link>

</TutorialPage>

</Control>