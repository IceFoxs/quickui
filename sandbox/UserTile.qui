<!-- A simple control that shows a user picture and name -->

<Control name="UserTile">

<!--
This control defines a couple of slots (name, picture) that can be
filled in by whatever's hosting the control. The markup defines where
that data should go. However, a host doesn't need to know about these
elements, and attempting to find and manipulate them directly is bad form.
Instead, hosts should pass data into and out of the control via the class'
programmatic interface as defined in the script tag; see below.
-->   
<content>
    <!--
    These elements follow a convention of using an ID that incorporates
    the name of the class. That's not required; it simply helps during
    debugging to be able to visually inspect a DOM element (e.g., in Firebug)
    and figure out which control put it there.
    -->
    <img id="UserTile_picture" />
    <div id="UserTile_name" />
</content>

<!-- Styles for the markup above -->
<style>
{   /* Applies to the top-level element for the control. */
    display: table;
    font-size: 14px;
}

#UserTile_picture {
    display: table-cell;
    height: 50px;
    padding-right: 8px;
    width: 50px;
}

#UserTile_name {
    color: #3B5998;
    cursor: pointer;
    display: table-cell;
    vertical-align: top;
}
</style>

<script>
/*
 * The control class defines new members by extending the control
 * class's prototype. The .extend() function is inherited from the
 * jQuery object.
 */
UserTile.prototype.extend({
    
    /*
     * The following defines a function called name() that gets/sets the
     * contents of the DOM element with id #UserTile_picture.
     * 
     * These functions make use of a helper function called bindTo.
     * bindTo returns a function that applies a sequence of jQuery operations
     * to "this". E.g., the line below is functionally equivalent to
     * 
     * name: function(value) {
     *     return this.$UserTile_name().content(value);
     * }
     * 
     * Two points are worth making about the above line. First, the $UserTile_name()
     * is an example of an "element function" automatically defined by the QuickUI
     * compiler. This function will map an array of control instances to a corresponding
     * array of elements with the indicated ID within those controls. That is, $foo()
     * will return the element(s) with id="foo".
     * 
     * The second noteworthy part of the line above is the content() function.
     * In its basic form, content() is a helper function that simply affords access to
     * an element's content. It's similar to $.contents(), but is writeable, and
     * also attempts to return its results in canonical format. See the definition
     * in quickui.js for more details.
     * 
     * The result of all this will be that UserTile will have a function called name()
     * that sets and gets the contents of the div element with id="UserTile_name". 
     */
    name: Control.bindTo("$UserTile_name", "content"),
    
    /*
     * The following line creates a picture() function is similar to the name()
     * function above. In this case, any string passed in will be used to set
     * the src property (attribute) on the img element above.
     */
    picture: Control.bindTo("$UserTile_picture", "prop/src"),
    
    /*
     * The initialize() function is invoked immediately after the control has
     * been instantiated. Any child control's defined in the control markup
     * (above) will already be instantiated as well. However, depending on how
     * the control was instantiated, the control itself may or may not be in
     * the document's DOM yet.
     * 
     * The initialize() function is typically used to perform initialization such
     * as wiring up event handlers. Inside this function, "this" refers to the
     * control instance.
     */
    initialize: function() {
        /* Wire up a click event handler for the user name. */
        var self = this;
        this.$UserTile_name().click(function() {
            alert("Hi, " + self.name() + "!");
        });
    }
});
</script>

</Control>
