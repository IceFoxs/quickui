###
Subclassing

# TODO: Comments
###


# TODO: Comments
controlConstructor = ->
  ###
  The constructor needs to deal with two situations:
  1. The Control class is being instantiated.
  2. A CoffeeScript-based subclass of Control is being instantiated. The default
     constructor for a CoffeeScript class invokes the base class' constructor.
     In that case, this constructor will ensure the subclass is compatible with
     jQuery and QuickUI before going further.
  In either case, the constructor ultimately returns an instance of an "init"
  helper class, as is usual for jQuery.
  ###
  ( selector, context ) ->

    # Figure out which class is being instantiated.
    if @ isnt window
      # Simple case, but also unfortunately rare. The constructor was invoked
      # in response to a "new Foo()" call on the control class Foo.
      classFn = @constructor
    else
      # Harder case. The constructor was invoked in the static constructor form
      # preferred by jQuery: calling a class Foo() without "new". Here, "this"
      # is the window, which doesn't give us any class information. We have to
      # walk up the call chain of callers to find which class we're actually
      # instantiating.
      classFn = arguments.callee

      # See if we were invoked by the constructor of a subclass that was created
      # by CoffeeScript. We use "__super__" to detect the latter criterion.
      while ( classFn.caller:: ) instanceof classFn and classFn.caller.__super__ isnt undefined
        # This function was invoked by the constructor of a subclass created by
        # CoffeeScript. That constructor, in all likelihood, is the default
        # constructor generated by CoffeeScript (as QuickUI controls don't do
        # real work in their constructor; they use initialize() instead).
        # So, pop up one level in the call tree, then check *that* class to
        # see whether it's a CoffeeScript sub-subclass.
        classFn = classFn.caller

    # Ensure the class has been treated to be jQuery- and QuickUI-compatible.
    if coffeeClassNeedsCompatibility classFn
      makeCoffeeClassCompatible classFn

    # Actually create an instance of the init helper class per standard jQuery.
    return new classFn::init selector, context


###
Return true if the given class is already jQuery and QuickUI compatible.
###
coffeeClassNeedsCompatibility = ( classFn ) ->
  # Look for __super__ member, which is created by CoffeeScript's class syntax.
  if classFn.hasOwnProperty "__super__"
    # Class was created by CoffeeScript. CoffeeScript will have copied all keys
    # from the base class to this present class. One of those keys is the
    # "superclass" member. If the class hasn't yet been made compatible, this
    # copied superclass member will still point to the super-superclass. So we
    # can compare the __super__'s constructor to the superclass value to see if
    # the class has been made compatible.
    classFn.__super__.constructor isnt classFn.superclass
  else
    # Regular JavaScript class
    false


# TODO: Comments:
createInitClass = ( classFn ) ->

  # This is the same init helper class that $.sub() creates.
  classFn::init = ( selector, context ) ->
    if context and context instanceof jQuery and !( context instanceof classFn )
      context = classFn( context )
    return jQuery::init.call this, selector, context, root
    
  # The init object is what jQuery actually instantiates, so we need to make
  # sure it's got the right prototype.
  classFn::init:: = classFn::
  
  # This is used in the closure for the init() function defined above.
  # Per jQuery.sub(), this must be declared *after* the init.prototype is
  # set above, or else the this() constructor won't work.
  root = classFn document


###
Return a jQuery-compatible subclass of the indicated superclass.

# TODO: Comments
###
createSubclass = ( superclass ) ->
  
  if coffeeClassNeedsCompatibility superclass
    # Make CoffeeScript-based superclass compatible first.
    makeCoffeeClassCompatible superclass 

  subclass = controlConstructor()

  # Give the new class all the class methods of the superclass.
  jQuery.extend true, subclass, superclass

  # jQuery classes define a "superclass" member that points to the superclass;
  # CoffeeScript classes define a "__super__" member that points to the
  # superclass' prototype. Both of these will have been copied by the call to
  # $.extend() above. Now update them with the real values.
  subclass.superclass = superclass
  subclass.__super__ = superclass::

  # Create a prototype of the appropriate class, and update its constructor
  # so that instanceof will work as expected.
  subclass:: = superclass()
  subclass::constructor = subclass

  # jQuery classes use fn as a synonym for prototype.
  subclass.fn = subclass::

  # Create the init helper class which jQuery expects.
  createInitClass subclass

  subclass


###
Make the class compatibile with jQuery and QuickUI.
  
CoffeeScript and jQuery have a roughly equivalent subclassing mechanism,
although jQuery's is far more byzantine. Among other things, jQuery class
constructors actually return an instance of a helper class called init. This
method doctors up the CoffeeScript class to make it function the same as a
class created with $.sub().
###
makeCoffeeClassCompatible = ( classFn ) ->
  
  # CoffeeScript sets __super__ as a pointer to the superclass' prototype,
  # but QuickUI wants superclass, a pointer to the superclass itself. 
  superclass = classFn.__super__.constructor
  classFn.superclass = superclass
  
  if coffeeClassNeedsCompatibility superclass
    # Make CoffeeScript-based superclass compatible first.
    makeCoffeeClassCompatible superclass 
  
  # jQuery classes use fn as a synonym for prototype.
  classFn.fn = classFn::

  createInitClass classFn

  # Get class name from function in modern browser, otherwise parse constructor.
  classFn::className = classFn.name ? /function\s+([^\( ]*)/.exec( classFn.toString() )[1]
