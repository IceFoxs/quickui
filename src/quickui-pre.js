// Generated by CoffeeScript 1.3.1
(function() {
  var Control, copyExcludingKeys, evaluateControlJson, evaluateControlJsonProperties, evaluateControlJsonValue, findMethodImplementation, isElementInDocument, render, _super;

  evaluateControlJson = function(json, logicalParent) {
    var control, elementReference, firstKey, html, logicalParentClass, properties, reservedKeys, stripped;
    for (firstKey in json) {
      break;
    }
    if (firstKey !== "html" && firstKey !== "control") {
      return json;
    }
    reservedKeys = {};
    reservedKeys[firstKey] = true;
    stripped = copyExcludingKeys(json, reservedKeys);
    properties = evaluateControlJsonProperties(stripped, logicalParent);
    control = void 0;
    if (firstKey === "html") {
      html = json.html;
      if (/^\w+$/.test(html)) {
        html = "<" + html + ">";
      }
      control = Control(html).properties(properties);
    } else {
      control = Control.getClass(json.control).create(properties);
    }
    if (json.id) {
      logicalParentClass = logicalParent.constructor;
      elementReference = "$" + json.id;
      if (!logicalParentClass.prototype[elementReference]) {
        logicalParentClass.prototype[elementReference] = function(elements) {
          return this.referencedElement(elementReference, elements);
        };
      }
      logicalParent.referencedElement(elementReference, control);
    }
    return control;
  };

  evaluateControlJsonProperties = function(json, logicalParent) {
    var key, properties;
    if (!$.isPlainObject(json)) {
      json = {
        content: json
      };
    }
    properties = {};
    for (key in json) {
      properties[key] = evaluateControlJsonValue(json[key], logicalParent);
    }
    return properties;
  };

  evaluateControlJsonValue = function(value, logicalParent) {
    var i, item, itemValue, result;
    result = void 0;
    if ($.isArray(value)) {
      result = [];
      i = 0;
      while (i < value.length) {
        item = value[i];
        itemValue = evaluateControlJsonValue(item, logicalParent);
        if (itemValue instanceof jQuery) {
          itemValue = itemValue[0];
        }
        result.push(itemValue);
        i++;
      }
    } else if ($.isPlainObject(value)) {
      result = evaluateControlJson(value, logicalParent);
    } else {
      result = value;
    }
    return result;
  };

  copyExcludingKeys = function(obj, excludeKeys) {
    var copy, key;
    copy = {};
    for (key in obj) {
      if (!excludeKeys[key]) {
        copy[key] = obj[key];
      }
    }
    return copy;
  };

  isElementInDocument = function(element) {
    return !!document.body && (document.body === element || $.contains(document.body, element));
  };

  findMethodImplementation = function(methodFn, classFn) {
    var key, methodInherited, prototype;
    prototype = classFn.prototype;
    for (key in prototype) {
      if (prototype[key] === methodFn) {
        methodInherited = (classFn.superclass ? prototype[key] === classFn.superclass.prototype[key] : false);
        if (!methodInherited) {
          return {
            classFn: classFn,
            fnName: key
          };
        }
      }
    }
    if (classFn.superclass) {
      return findMethodImplementation(methodFn, classFn.superclass);
    } else {
      return null;
    }
  };

  $.fn.control = function(arg1, arg2) {
    var $cast, controlClass, properties;
    if (arg1 === undefined) {
      $cast = Control(this).cast(jQuery);
      if ($cast instanceof Control) {
        return $cast;
      } else {
        return null;
      }
    } else if ($.isFunction(arg1)) {
      controlClass = arg1;
      properties = arg2;
      return controlClass.createAt(this, properties);
    } else {
      return Control(this).cast().properties(arg1);
    }
  };

  $.expr[":"].control = function(elem) {
    var controlClass;
    controlClass = Control(elem)._controlClass();
    if (controlClass) {
      return controlClass === Control || controlClass.prototype["instanceof"](Control);
    } else {
      return false;
    }
  };

  Control = $.sub();

  $.extend(Control, {
    chain: function() {
      var args, chain, functionNames, functionParams, i, length, parts, sideEffectFn;
      args = arguments;
      sideEffectFn = void 0;
      if ($.isFunction(args[args.length - 1])) {
        args = [].slice.call(arguments);
        sideEffectFn = args.pop();
      }
      functionNames = [];
      functionParams = [];
      i = 0;
      length = args.length;
      while (i < length) {
        parts = arguments[i].split("/");
        functionNames[i] = parts.shift();
        functionParams[i] = parts;
        i++;
      }
      return chain = function(value) {
        var fn, message, params, result;
        result = this;
        i = 0;
        length = functionNames.length;
        while (i < length) {
          fn = result[functionNames[i]];
          params = functionParams[i];
          if (value !== undefined && i === length - 1) {
            params = params.concat([value]);
          }
          if (fn === undefined) {
            message = "Control class \"" + this.className() + "\" tried to chain to an undefined getter/setter function \"" + functionNames[i] + "\".";
            throw message;
          }
          result = fn.apply(result, params);
          i++;
        }
        if (value === undefined) {
          return result;
        } else {
          if (sideEffectFn) {
            sideEffectFn.call(this, value);
          }
          return this;
        }
      };
    },
    classHierarchy: "Control",
    className: "Control",
    create: function(properties) {
      return this.createAt(null, properties);
    },
    createAt: function(target, properties) {
      var $controls, defaultTarget, existingTag, i, length, oldContents;
      defaultTarget = "<" + this.prototype.tag + "/>";
      $controls = void 0;
      oldContents = void 0;
      if (target === null) {
        $controls = this(defaultTarget);
        oldContents = [];
      } else {
        $controls = this(target);
        oldContents = $controls._significantContents();
        existingTag = $controls[0].nodeName.toLowerCase();
        if (existingTag !== this.prototype.tag.toLowerCase() && existingTag !== "body") {
          $controls = this._replaceElements($controls, this(defaultTarget));
        }
      }
      if (typeof properties === "string") {
        properties = {
          content: properties
        };
      }
      $controls._controlClass(this).addClass(this.classHierarchy).render().propertyVector("content", oldContents).properties(properties);
      if (this.genericIfClassIs === this.className) {
        $controls.generic(true);
      }
      i = 0;
      length = $controls.length;
      while (i < length) {
        $controls.nth(i).initialize();
        i++;
      }
      return $controls;
    },
    getClass: function(value) {
      var classFn;
      classFn = void 0;
      if (value === null || value === "") {
        classFn = null;
      } else if ($.isFunction(value)) {
        classFn = value;
      } else if ($.isPlainObject(value)) {
        classFn = Control.subclass(value);
      } else {
        classFn = window[value];
        if (!classFn) {
          throw "Unable to find a class called \"" + value + "\".";
        }
      }
      return classFn;
    },
    isControl: function(element) {
      return Control(element).control() !== undefined;
    },
    iterator: function(fn) {
      return function() {
        var args, iteratorResult;
        args = arguments;
        iteratorResult = void 0;
        this.eachControl(function(index, $control) {
          var result;
          result = fn.apply($control, args);
          if (result !== undefined) {
            iteratorResult = result;
            return false;
          }
        });
        if (iteratorResult !== undefined) {
          return iteratorResult;
        } else {
          return this;
        }
      };
    },
    property: function(sideEffectFn, defaultValue, converterFunction) {
      var backingPropertyName;
      backingPropertyName = "_property" + Control.property._symbolCounter++;
      return function(value) {
        var result;
        result = void 0;
        if (value === undefined) {
          result = this.data(backingPropertyName);
          if (result === undefined) {
            return defaultValue;
          } else {
            return result;
          }
        } else {
          return this.eachControl(function(index, $control) {
            result = (converterFunction ? converterFunction.call($control, value) : value);
            $control.data(backingPropertyName, result);
            if (sideEffectFn) {
              return sideEffectFn.call($control, result);
            }
          });
        }
      };
    },
    subclass: function(json) {
      var inherited, newClass, superclass;
      superclass = this;
      newClass = superclass.sub();
      delete newClass._initializeQueue;
      if (json) {
        if (json.className) {
          newClass.extend({
            className: json.className,
            classHierarchy: json.className + " " + superclass.classHierarchy
          });
        }
        if (json.genericSupport) {
          newClass.genericIfClassIs = json.className;
        }
        inherited = copyExcludingKeys(json, {
          className: true,
          genericSupport: true,
          prototype: true,
          tag: true
        });
        jQuery.extend(newClass.prototype, json.prototype, {
          inherited: inherited,
          tag: json.tag
        });
      } else {
        newClass.className = undefined;
        newClass.prototype.inherited = null;
      }
      return newClass;
    },
    _checkForElementInsertion: function(event) {
      var $control, callback, callbacksReady, element, i, _results;
      callbacksReady = [];
      i = 0;
      while (i < Control._elementInsertionCallbacks.length) {
        element = Control._elementInsertionCallbacks[i].element;
        if (isElementInDocument(element)) {
          callbacksReady = callbacksReady.concat(Control._elementInsertionCallbacks[i]);
          Control._elementInsertionCallbacks.splice(i, 1);
        } else {
          i++;
        }
      }
      if (Control._elementInsertionCallbacks.length === 0) {
        Control._stopListeningForElementInsertion();
      }
      i = 0;
      _results = [];
      while (i < callbacksReady.length) {
        element = callbacksReady[i].element;
        $control = Control(element).control();
        callback = callbacksReady[i].callback;
        callback.call($control);
        _results.push(i++);
      }
      return _results;
    },
    _controlClassData: "_controlClass",
    _elementInsertionCallbacks: [],
    _listeningForElementInsertion: false,
    _mutationEvents: function() {
      return !$.browser.msie || parseInt($.browser.version) >= 9;
    },
    _replaceElements: function($existing, $replacement) {
      var $new, ids;
      ids = $existing.map(function(index, element) {
        return $(element).prop("id");
      });
      $new = $replacement.replaceAll($existing);
      $new.each(function(index, element) {
        var id;
        id = ids[index];
        if (id && id.length > 0) {
          return $(element).prop("id", ids[index]);
        }
      });
      return $new;
    },
    _startListeningForElementInsertion: function() {
      var self;
      if (Control._mutationEvents()) {
        if (document.body) {
          jQuery("body").on("DOMNodeInserted", Control._checkForElementInsertion);
          return Control._listeningForElementInsertion = true;
        } else if (!Control._deferredElementInsertionListening) {
          jQuery("body").ready(function() {
            Control._checkForElementInsertion();
            if (Control._elementInsertionCallbacks.length > 0) {
              Control._startListeningForElementInsertion();
            }
            return Control._deferredElementInsertionListening = false;
          });
          return Control._deferredElementInsertionListening = true;
        }
      } else {
        self = this;
        return Control._elementInsertionInterval = window.setInterval(function() {
          return self._checkForElementInsertion();
        }, 10);
      }
    },
    _stopListeningForElementInsertion: function() {
      if (Control._mutationEvents()) {
        jQuery("body").off("DOMNodeInserted", Control._checkForElementInsertion);
        return Control._listeningForElementInsertion = false;
      } else {
        window.clearInterval(Control._elementInsertionInterval);
        return Control._elementInsertionInterval = null;
      }
    }
  });

  $.extend(Control.property, {
    bool: function(sideEffectFn, defaultValue) {
      var convertToBool;
      return Control.property(sideEffectFn, defaultValue, convertToBool = function(value) {
        return String(value) === "true";
      });
    },
    "class": function(sideEffectFn, defaultValue) {
      return Control.property(sideEffectFn, defaultValue, Control.getClass);
    },
    date: function(sideEffectFn, defaultValue) {
      var convertToDate;
      return Control.property(sideEffectFn, defaultValue, convertToDate = function(value) {
        if (value instanceof Date || !(value != null)) {
          return value;
        } else {
          return new Date(Date.parse(value));
        }
      });
    },
    integer: function(sideEffectFn, defaultValue) {
      return Control.property(sideEffectFn, defaultValue, parseInt);
    },
    _symbolCounter: 0
  });

  $.extend(Control.prototype, {
    applyClass: function(classes, value) {
      if (value === undefined) {
        return this.hasClass(classes);
      } else {
        return this.toggleClass(classes, String(value) === "true");
      }
    },
    cast: function(defaultClass) {
      var $element, elementClass, i, length, setClass;
      defaultClass = defaultClass || this.constructor;
      setClass = void 0;
      i = 0;
      length = this.length;
      while (i < length) {
        $element = this.nth(i);
        elementClass = $element._controlClass() || defaultClass;
        if (setClass === undefined || setClass.prototype["instanceof"](elementClass)) {
          setClass = elementClass;
        }
        i++;
      }
      setClass = setClass || defaultClass;
      return setClass(this);
    },
    checkForSizeChange: function() {
      if (this._updateSavedSize()) {
        this.trigger("sizeChanged");
      }
      return this;
    },
    "class": function(classList) {
      if (classList === undefined) {
        return this.attr("class");
      } else {
        return this.toggleClass(classList, true);
      }
    },
    className: function() {
      return this.constructor.className;
    },
    content: function(value) {
      var $element, array, result, resultContainsStrings;
      if (value === undefined) {
        $element = this.nth(0);
        result = void 0;
        if ($element.isInputElement()) {
          result = $element.val();
        } else {
          resultContainsStrings = false;
          result = $element.contents().map(function(index, item) {
            if (item.nodeType === 3) {
              resultContainsStrings = true;
              return item.nodeValue;
            } else {
              return item;
            }
          });
          if (resultContainsStrings && result.length === 1) {
            result = result[0];
          }
        }
        return result;
      } else {
        array = (arguments.length > 1 ? arguments : (value instanceof jQuery ? value.get() : ($.isArray(value) ? value : [value])));
        return this.each(function(index, element) {
          $element = Control(element);
          if ($element.isInputElement()) {
            return $element.val(value);
          } else {
            $element.children().detach();
            return $element.empty().append.apply($element, array);
          }
        });
      }
    },
    culture: function(culture) {
      var controlCulture, cultureDataMember;
      cultureDataMember = "_culture";
      controlCulture = void 0;
      if (culture === undefined) {
        controlCulture = this.data(cultureDataMember);
        return controlCulture || (window.Globalize ? Globalize.culture() : null);
      } else {
        controlCulture = (typeof culture === "string" ? Globalize.findClosestCulture(culture) : culture);
        this.data(cultureDataMember, controlCulture);
        return this;
      }
    },
    eachControl: function(fn) {
      var $control, i, length, result;
      i = 0;
      length = this.length;
      while (i < length) {
        $control = this.nth(i).control();
        result = fn.call($control, i, $control);
        if (result === false) {
          break;
        }
        i++;
      }
      return this;
    },
    generic: Control.property.bool(function(generic) {
      return this.applyClass("generic", generic);
    }),
    genericIfClassIs: function(classFn) {
      return this.eachControl(function(index, $control) {
        if ($control.constructor === classFn && $control.generic() === undefined) {
          return $control.generic(true);
        }
      });
    },
    id: function(id) {
      return this.attr("id", id);
    },
    initialize: function() {},
    inDocument: function(callback) {
      var $element, callbacks, element, i;
      if (callback === undefined) {
        if (this.length === 0) {
          return false;
        }
        i = 0;
        while (i < this.length) {
          if (!isElementInDocument(this[i])) {
            return false;
          }
          i++;
        }
        return true;
      } else {
        callbacks = [];
        i = 0;
        while (i < this.length) {
          $element = this.nth(i);
          element = $element[0];
          if (isElementInDocument(element)) {
            callback.call($element);
          } else {
            callbacks.push({
              element: element,
              callback: callback
            });
          }
          i++;
        }
        if (callbacks.length > 0) {
          Control._elementInsertionCallbacks = callbacks.concat(Control._elementInsertionCallbacks);
          if (!Control._listeningForElementInsertion) {
            Control._startListeningForElementInsertion();
          }
        }
        return this;
      }
    },
    isInputElement: function() {
      var inputTags;
      inputTags = ["input", "select", "textarea"];
      if (this.length === 0) {
        return false;
      } else {
        return $.inArray(this[0].nodeName.toLowerCase(), inputTags) >= 0;
      }
    },
    json: function(json, logicalParent) {
      var control, i, length, properties, _results;
      logicalParent = logicalParent || this;
      i = 0;
      length = this.length;
      _results = [];
      while (i < length) {
        control = this.nth(i);
        properties = evaluateControlJsonProperties(json, logicalParent.nth(i));
        control.properties(properties);
        _results.push(i++);
      }
      return _results;
    },
    nth: function(index) {
      return this.constructor(this[index]);
    },
    referencedElement: function(key, elements) {
      var $result, element, i, length;
      if (elements === undefined) {
        elements = [];
        i = 0;
        length = this.length;
        while (i < length) {
          element = $(this[i]).data(key);
          if (element !== undefined) {
            elements.push(element);
          }
          i++;
        }
        $result = Control(elements).cast();
        $result.prevObject = this;
        return $result;
      } else {
        i = 0;
        length = this.length;
        while (i < length) {
          $(this[i]).data(key, elements[i]);
          i++;
        }
        return this;
      }
    },
    render: render = function() {
      var classFn, superclass;
      classFn = this.constructor;
      if (classFn !== Control) {
        superclass = classFn.superclass;
        superclass(this).render().json(this.inherited, this);
      }
      return this;
    },
    properties: function(properties) {
      var message, propertyName, value;
      for (propertyName in properties) {
        if (this[propertyName] === undefined) {
          message = "Tried to set undefined property " + this.className() + "." + propertyName + "().";
          throw message;
        }
        value = properties[propertyName];
        this[propertyName].call(this, value);
      }
      return this;
    },
    propertyVector: function(propertyName, values) {
      var i, length, length1, length2, propertyFn, results;
      propertyFn = this[propertyName];
      if (values === undefined) {
        results = [];
        i = 0;
        length = this.length;
        while (i < length) {
          results[i] = propertyFn.call(this.nth(i));
          i++;
        }
        return results;
      } else {
        i = 0;
        length1 = this.length;
        length2 = values.length;
        while (i < length1 && i < length2) {
          if (!!values[i]) {
            propertyFn.call(this.nth(i), values[i]);
          }
          i++;
        }
        return this;
      }
    },
    inherited: null,
    style: function(style) {
      return this.attr("style", style);
    },
    tabindex: function(tabindex) {
      return this.attr("tabindex", tabindex);
    },
    transmute: function(newClass, preserveContent, preserveClasses, preserveEvents) {
      var $controls, classFn, oldClasses, oldContents;
      classFn = Control.getClass(newClass);
      oldContents = (preserveContent ? this._significantContents() : null);
      oldClasses = (preserveClasses ? this.prop("class") : null);
      this.empty().removeClass().removeData();
      if (!preserveEvents) {
        this.off();
      }
      $controls = classFn.createAt(this);
      if (oldContents) {
        $controls.propertyVector("content", oldContents);
      }
      if (oldClasses) {
        $controls.removeClass("Control").addClass(oldClasses).addClass("Control");
      }
      return $controls;
    },
    tag: "div",
    quickui: "0.8.9",
    visibility: function(value) {
      if (value === undefined) {
        return this.is(":visible");
      } else {
        return this.toggle(String(value) === "true");
      }
    },
    _controlClass: function(classFn) {
      if (classFn) {
        return this.data(Control._controlClassData, classFn);
      } else {
        return this.data(Control._controlClassData);
      }
    },
    _significantContents: function() {
      var contents, significantContents;
      contents = Control(this).propertyVector("content");
      significantContents = $.map(contents, function(content) {
        var c, i, length;
        if (typeof content === "string" ? $.trim(content).length > 0 : void 0) {
          return content;
        }
        i = 0;
        length = content.length;
        while (i < length) {
          c = content[i];
          if (typeof c === "string") {
            if ($.trim(c).length > 0) {
              return content;
            }
          } else {
            if (c.nodeType !== 8) {
              return content;
            }
          }
          i++;
        }
        return null;
      });
      return significantContents;
    },
    _super: _super = function() {
      var callerFn, callerFnName, classFn, classInfo, superFn;
      callerFn = (_super && _super.caller ? _super.caller : arguments.callee.caller);
      if (!callerFn) {
        return undefined;
      }
      superFn = callerFn._superFn;
      if (!superFn) {
        classInfo = findMethodImplementation(callerFn, this.constructor);
        if (classInfo) {
          classFn = classInfo.classFn;
          callerFnName = classInfo.fnName;
          superFn = classFn.superclass.prototype[callerFnName];
          callerFn._superFn = superFn;
        }
      }
      if (superFn) {
        return superFn.apply(this, arguments);
      } else {
        return undefined;
      }
    },
    _updateSavedSize: function() {
      var previousSize, size;
      previousSize = this.data("_size") || {};
      size = {
        height: this.height(),
        width: this.width()
      };
      if (size.height === previousSize.height && size.width === previousSize.width) {
        return false;
      }
      this.data("_size", size);
      return true;
    }
  });

  $.event.special.layout = {
    add: function(handleObj) {
      var layout;
      layout = $.event.special.layout;
      layout._trackedElements = layout._trackedElements.add(this);
      return Control(this).inDocument(function() {
        var event, handler;
        handler = handleObj.handler;
        event = new jQuery.Event("layout");
        return handler.call(this, event);
      });
    },
    handle: function(event) {
      var control;
      control = Control(this);
      if (!control.inDocument()) {
        return;
      }
      if (!control.checkForSizeChange()) {
        return;
      }
      return event.handleObj.handler.apply(this, arguments);
    },
    setup: function() {
      var layout;
      layout = $.event.special.layout;
      if (!layout._trackingResizeEvent) {
        $(window).resize(function() {
          return layout._windowResized();
        });
        return layout._trackingResizeEvent = true;
      }
    },
    teardown: function() {
      return $.event.special.layout._trackedElements = $.event.special.layout._trackedElements.not(this);
    },
    _trackedElements: $(),
    _windowResized: function() {
      return $.event.special.layout._trackedElements.trigger("layout");
    }
  };

  window.Control = Control;

}).call(this);
