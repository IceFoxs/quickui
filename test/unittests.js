// Generated by CoffeeScript 1.3.1

/*
CoffeeScript support unit tests
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.coffeeTests = function() {
    var Greet, Simple;
    Simple = (function(_super) {

      __extends(Simple, _super);

      Simple.name = 'Simple';

      function Simple() {
        return Control.coffee();
      }

      return Simple;

    })(Control);
    Greet = (function(_super) {

      __extends(Greet, _super);

      Greet.name = 'Greet';

      function Greet() {
        return Control.coffee();
      }

      Greet.prototype.inherited = {
        content: [
          "Hello ", {
            html: "<span>",
            id: "Greet_content"
          }
        ]
      };

      Greet.prototype.content = Control.chain("$Greet_content", "content");

      return Greet;

    })(Simple);
    test("CoffeeScript: create simple class", function() {
      var simple;
      simple = Simple.create("Hello");
      ok(simple instanceof jQuery);
      ok(simple instanceof Control);
      ok(simple instanceof Simple);
      ok(simple instanceof Simple.prototype.init);
      equal(Simple.className, "Simple");
      equal(Simple.classHierarchy, "Simple Control");
      return equal(simple.content(), "Hello");
    });
    return test("CoffeeScript: create subclass", function() {
      var greet;
      greet = Greet.create("Ann");
      ok(greet instanceof Simple);
      ok(greet instanceof Greet);
      equal(Greet.className, "Greet");
      equal(Greet.classHierarchy, "Greet Simple Control");
      equal(greet.content(), "Ann");
      return equal(greet.text(), "Hello Ann");
    });
  };

  /*
  Utilities unit tests
  */


  window.utilitiesTests = function() {
    return test("Utilities: segments", function() {
      var c, segments;
      c = $("<div>Ann</div><div>Bob</div>").control(Control);
      segments = c.segments();
      ok(segments instanceof Array);
      equal(segments.length, 2);
      equal(segments[0].content(), "Ann");
      return equal(segments[1].content(), "Bob");
    });
  };

}).call(this);
