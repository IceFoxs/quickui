// Generated by CoffeeScript 1.3.1

/*
Shared sample classes used by unit tests.
*/


(function() {
  var createGreetClass,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  createGreetClass = function() {
    return window.Greet = Control.subclass({
      className: "Greet",
      content: [
        "Hello ", {
          html: "<span>Ann</span>",
          id: "name"
        }
      ]
    });
  };

  /*
  General control unit tests
  */


  $(function() {
    test("Create: from scratch", function() {
      var $c;
      $c = Control.create();
      equal($c.attr("class"), "Control");
      return equal($c.control()[0] === $c[0], true);
    });
    test("Create: set properties on constructor", function() {
      var $c;
      $c = Control.create({
        text: "Hello"
      });
      return equal($c.text(), "Hello");
    });
    test("control() on existing div", function() {
      var $c, $element;
      $element = $("<div/>");
      $c = $element.control(Control);
      equal($c.attr("class"), "Control");
      return equal($element.control()[0] === $c[0], true);
    });
    test("control() on multiple divs", function() {
      var $c, $elements, MyControl;
      MyControl = Control.subclass({
        className: "MyControl"
      });
      $elements = $().add("<div/>").add("<div/>");
      $c = $elements.control(MyControl);
      return equal($c.control().length, 2);
    });
    test("control() set properties", function() {
      var $c, $element;
      $element = $("<div/>");
      $c = Control.createAt($element);
      $element.control({
        text: "Hello"
      });
      return equal($c.text(), "Hello");
    });
    test("control() incorporate existing DOM content", function() {
      var $c, $children, $original, MyControl;
      MyControl = Control.subclass({
        className: "MyControl",
        content: [
          "*", {
            html: "<span/>",
            id: "MyControl_content"
          }, "*"
        ]
      });
      MyControl.prototype.content = Control.chain("$MyControl_content", "content");
      $original = $("<div><div>Hello</div><div>world</div></div>");
      $children = $original.children();
      $c = MyControl.createAt($children);
      return equal($c.text(), "*Hello**world*");
    });
    test("control() on existing content preserves existing control", function() {
      var $c, $original, $sub, $subcontrol, MyControl;
      MyControl = Control.subclass({
        className: "MyControl"
      });
      $original = $("<div><div id='subcontrol'/></div>");
      $subcontrol = $original.find("#subcontrol").control(MyControl);
      $c = $original.control(Control);
      $sub = $c.find("#subcontrol").control();
      return equal($sub.attr("class"), "MyControl Control");
    });
    test(":control filter", function() {
      var $c, $combined, $d;
      $c = Control.create();
      $d = $("<div/>");
      $combined = $c.add($d);
      ok($c.is(":control"));
      ok($d.not(":control"));
      ok($combined.is(":control"));
      return ok($combined.filter(":control").length === 1 && $combined.filter(":control")[0] === $c[0]);
    });
    return test("transmute: existing tag doesn't match desired tag", function() {
      var MyButton, c;
      MyButton = Control.subclass({
        className: "MyButton",
        tag: "button"
      });
      c = Control.create("Hello");
      equal(c[0].nodeName.toLowerCase(), "div");
      c = c.transmute(MyButton, true);
      equal(c[0].nodeName.toLowerCase(), "button");
      return equal(c.text(), "Hello");
    });
  });

  /*
  CoffeeScript support unit tests
  */


  $(function() {
    var GreetCoffee, SimpleCoffee;
    SimpleCoffee = (function(_super) {

      __extends(SimpleCoffee, _super);

      SimpleCoffee.name = 'SimpleCoffee';

      function SimpleCoffee() {
        return Control.coffee();
      }

      return SimpleCoffee;

    })(Control);
    GreetCoffee = (function(_super) {

      __extends(GreetCoffee, _super);

      GreetCoffee.name = 'GreetCoffee';

      function GreetCoffee() {
        return Control.coffee();
      }

      GreetCoffee.prototype.inherited = {
        content: [
          "Hello ", {
            html: "<span>Ann</span>",
            id: "GreetCoffee_content"
          }
        ]
      };

      GreetCoffee.prototype.content = Control.chain("$GreetCoffee_content", "content");

      return GreetCoffee;

    })(SimpleCoffee);
    test("CoffeeScript: create SimpleCoffee class", function() {
      var c;
      c = SimpleCoffee.create("Hello");
      ok(c instanceof jQuery);
      ok(c instanceof Control);
      ok(c instanceof SimpleCoffee);
      ok(c instanceof SimpleCoffee.prototype.init);
      equal(SimpleCoffee.className, "SimpleCoffee");
      equal(SimpleCoffee.classHierarchy, "SimpleCoffee Control");
      return equal(c.content(), "Hello");
    });
    return test("CoffeeScript: create subclass", function() {
      var c;
      c = GreetCoffee.create("Ann");
      ok(c instanceof SimpleCoffee);
      ok(c instanceof GreetCoffee);
      equal(GreetCoffee.className, "GreetCoffee");
      equal(GreetCoffee.classHierarchy, "GreetCoffee SimpleCoffee Control");
      equal(c.content(), "Ann");
      return equal(c.text(), "Hello Ann");
    });
  });

  /*
  Content unit tests
  */


  $(function() {
    test("Content: HTML text", function() {
      var $c;
      $c = Control.create();
      $c.content("Hello");
      equal($c.content(), "Hello");
      return equal($c.html(), "Hello");
    });
    test("Content: HTML text, return canonical form", function() {
      var $c;
      $c = Control.create();
      $c.content(["Hello"]);
      equal($c.content(), "Hello");
      return equal($c.html(), "Hello");
    });
    test("Content: HTML array", function() {
      var $c, b, content;
      $c = Control.create();
      b = $("<b>there</b>")[0];
      $c.content(["Hello", b, "world"]);
      equal($c.html().toLowerCase(), "hello<b>there</b>world");
      content = $c.content();
      equal(content[0], "Hello");
      equal(content[1], b);
      return equal(content[2], "world");
    });
    test("Content: input element", function() {
      var $c;
      $c = Control("<input type='text'/>");
      $c.content("Hello");
      equal($c.content(), "Hello");
      return equal($c.val(), "Hello");
    });
    return test("Content: jQuery object", function() {
      var $c, content;
      $c = Control.create();
      $c.content("<h1>Hello</h1>");
      content = $c.content();
      ok(content instanceof jQuery);
      equal(content[0].nodeName.toLowerCase(), "h1");
      return equal(content.html(), "Hello");
    });
  });

  /*
  inDocument unit tests
  */


  $(function() {});

  /*
  Control JSON unit tests
  */


  $(function() {
    test("json: plain text", function() {
      var c;
      c = Control.create();
      c.json({
        content: "Hello"
      });
      return equal(c.content(), "Hello");
    });
    test("json: html", function() {
      var c;
      c = Control.create();
      c.json({
        content: {
          html: "<h1>Hello</h1>"
        }
      });
      return equal(c.html().toLowerCase(), "<h1>hello</h1>");
    });
    test("json: html tag singleton without brackets", function() {
      var c;
      c = Control.create();
      c.json({
        content: {
          html: "span"
        }
      });
      return equal(c.html().toLowerCase(), "<span></span>");
    });
    test("json: control", function() {
      var c, greet;
      createGreetClass();
      Greet.prototype.extend({
        name: Control.chain("$name", "content")
      });
      c = Control.create();
      c.json({
        content: {
          control: "Greet",
          name: "Bob"
        }
      });
      greet = c.content().control();
      ok(greet instanceof Greet);
      return equal(greet.text(), "Hello Bob");
    });
    test("json: explicit content array", function() {
      var c;
      c = Control.create();
      c.json({
        content: ["Hello", "world"]
      });
      equal(c.contents().length, 2);
      equal(c.contents().eq(0).text(), "Hello");
      return equal(c.contents().eq(1).text(), "world");
    });
    return test("json: implicit content array", function() {
      var c;
      c = Control.create();
      c.json(["Hello", "world"]);
      equal(c.contents().length, 2);
      equal(c.contents().eq(0).text(), "Hello");
      return equal(c.contents().eq(1).text(), "world");
    });
  });

  /*
  Layout unit tests
  */


  $(function() {});

  /*
  Localization unit tests
  */


  /*
  Control property declaration unit tests
  */


  $(function() {
    test("Properties: chain: root content", function() {
      var $c, result;
      createGreetClass();
      Greet.prototype.extend({
        foo: Control.chain("content")
      });
      $c = Greet.create();
      result = $c.foo();
      equal(result[0], "Hello ");
      equal($(result[1]).html(), "Ann");
      $c.foo("world");
      return equal($c.html(), "world");
    });
    test("Properties: chain: element", function() {
      var $c, $element;
      createGreetClass();
      Greet.prototype.extend({
        name: Control.chain("$name")
      });
      $c = Greet.create();
      $element = $c.$name();
      equal($element[0], $c.find("#name")[0]);
      return equal($element.html(), "Ann");
    });
    test("Properties: chain: element content", function() {
      var $c;
      createGreetClass();
      Greet.prototype.extend({
        name: Control.chain("$name", "content")
      });
      $c = Greet.create();
      equal($c.name(), "Ann");
      $c.name("Bob");
      return equal($c.text(), "Hello Bob");
    });
    test("Properties: chain: subcontrol property", function() {
      var $c, MyControl;
      createGreetClass();
      Greet.prototype.extend({
        name: Control.chain("$name", "content")
      });
      MyControl = Control.subclass({
        className: "MyControl",
        content: {
          control: "Greet",
          id: "greet"
        }
      });
      MyControl.prototype.extend({
        name: Control.chain("$greet", "name")
      });
      $c = MyControl.create();
      equal($c.name(), "Ann");
      $c.name("Bob");
      return equal($c.$greet().text(), "Hello Bob");
    });
    test("Properties: chain: element content with iteration", function() {
      var $c, $g, $inner1, $inner2;
      createGreetClass();
      Greet.prototype.extend({
        name: Control.chain("$name", "content")
      });
      $inner1 = Greet.create({
        name: "Ann"
      });
      $inner2 = Greet.create({
        name: "Bob"
      });
      $c = Control.create({
        content: [$inner1, "/", $inner2]
      });
      equal($c.text(), "Hello Ann/Hello Bob");
      $g = Greet($c.find(".Greet"));
      equal($g.name(), "Ann");
      $g.name("Carol");
      return equal($c.text(), "Hello Carol/Hello Carol");
    });
    test("Properties: chain: element content with side effect function", function() {
      var $c;
      createGreetClass();
      Greet.prototype.extend({
        name: Control.chain("$name", "content", function(name) {
          return this.data("_name", name);
        })
      });
      $c = Greet.create();
      $c.name("Ann");
      equal($c.name(), "Ann");
      return equal($c.data("_name"), "Ann");
    });
    test("Properties: chain: chaining", function() {
      var $c, result;
      createGreetClass();
      Greet.prototype.extend({
        foo: Control.chain("content"),
        bar: Control.chain("prop/display")
      });
      $c = Greet.create();
      result = $c.foo("Hello").bar("inline");
      equal($c.content(), "Hello");
      equal($c.prop("display"), "inline");
      return equal(result, $c);
    });
    test("Properties: chain: functions with parameters", function() {
      var $c, MyControl;
      MyControl = Control.subclass({
        className: "MyControl"
      });
      MyControl.prototype.display = Control.chain("css/display");
      $c = MyControl.create();
      $c.css("display", "block");
      equal($c.display(), "block");
      $c.display("none");
      equal($c.css("display"), "none");
      return equal($c.display(), "none");
    });
    test("Properties: Define method", function() {
      var $c, $elements, MyControl, result;
      MyControl = Control.subclass({
        className: "MyControl"
      });
      MyControl.prototype.foo = function() {
        return this.data("_calledFoo", true);
      };
      $elements = Control("<div/>").add("<div/>");
      $c = $elements.control(MyControl);
      result = $c.foo();
      equal(result, void 0);
      equal($c.eq(0).data("_calledFoo"), true);
      return equal($c.eq(1).data("_calledFoo"), true);
    });
    test("Properties: Define method with iterator()", function() {
      var $c, $elements, MyControl, getterResult, methodResult;
      MyControl = Control.subclass({
        className: "MyControl"
      });
      MyControl.prototype.extend({
        foo: Control.iterator(function() {
          return this.data("_calledFoo", true);
        }),
        bar: Control.iterator(function() {
          this.data("_calledBar", true);
          return "Hello";
        })
      });
      $elements = Control("<div/>").add("<div/>");
      $c = $elements.control(MyControl);
      methodResult = $c.foo();
      equal(methodResult, $c);
      equal($c.eq(0).data("_calledFoo"), true);
      equal($c.eq(1).data("_calledFoo"), true);
      getterResult = $c.bar();
      equal(getterResult, "Hello");
      equal($c.eq(0).data("_calledBar"), true);
      return equal($c.eq(1).data("_calledBar"), undefined);
    });
    test("Properties: Define getter/setter with iterator()", function() {
      var $c, $elements, c;
      c = Control.subclass();
      c.prototype.extend({
        myGetterSetter: Control.iterator(function(value) {
          return this.data("_property", value);
        })
      });
      $elements = Control("<div/>").add("<div/>");
      $c = $elements.control(c);
      $c.myGetterSetter("foo");
      equal($c.eq(0).control().data("_property"), "foo");
      return equal($c.eq(1).control().data("_property"), "foo");
    });
    test("Properties: Define getter/setter with Control.property", function() {
      var $c, $elements, c;
      c = Control.subclass();
      c.prototype.extend({
        myProperty: Control.property()
      });
      $elements = Control("<div/>").add("<div/>");
      $c = $elements.control(c);
      equal($c.myProperty() === undefined, true);
      $c.myProperty("foo");
      equal($c.eq(0).control().myProperty(), "foo");
      return equal($c.eq(1).control().myProperty(), "foo");
    });
    test("Properties: property", function() {
      var $c;
      $c = Control.create();
      $c.foo = Control.property();
      equal($c.foo() === undefined, true);
      $c.foo("Hello");
      return equal($c.foo(), "Hello");
    });
    test("Properties: property: bool", function() {
      var $c;
      $c = Control.create();
      $c.foo = Control.property.bool();
      $c.foo("true");
      equal($c.foo(), true);
      $c.foo(false);
      return equal($c.foo(), false);
    });
    return test("Properties: property: integer", function() {
      var $c;
      $c = Control.create();
      $c.foo = Control.property.integer();
      $c.foo("123");
      equal($c.foo(), 123);
      $c.foo(0);
      return equal($c.foo(), 0);
    });
  });

  /*
  CSS helpers unit tests
  */


  $(function() {
    test("Utilities: applyClass", function() {
      var $c;
      $c = Control.create().toggleClass("foo");
      equal($c.applyClass("foo"), true);
      equal($c.applyClass("enabled"), false);
      $c.applyClass("enabled", true);
      equal($c.applyClass("foo"), true);
      return equal($c.applyClass("enabled"), true);
    });
    return test("Utilities: visibility", function() {
      var $c;
      $c = Control.create();
      return equal($c.visibility(), false);
    });
  });

  /*
  _super() method invocation unit tests
  */


  $(function() {
    return test("_super()", function() {
      var A, B, C, a, b, c;
      A = Control.subclass("A");
      B = A.subclass("B");
      C = B.subclass("C");
      A.prototype.extend({
        decorate: function(s) {
          return "(a: " + s + ")";
        },
        calc: function(x) {
          return x * 2;
        }
      });
      B.prototype.extend({
        decorate: function(s) {
          return "(b: " + this._super(s) + ")";
        },
        calc: function(x) {
          return this._super(x) + 1;
        }
      });
      C.prototype.extend({
        decorate: function(s) {
          return "(c: " + this._super(s) + ")";
        }
      });
      c = C();
      equal(c.decorate("Hello"), "(c: (b: (a: Hello)))");
      equal(c.calc(3), 7);
      b = B();
      equal(b.decorate("Hello"), "(b: (a: Hello))");
      equal(b.calc(3), 7);
      a = A();
      equal(a.decorate("Hello"), "(a: Hello)");
      return equal(a.calc(3), 6);
    });
  });

  /*
  Utilities unit tests
  */


  $(function() {
    test("Utilities: cast: control() on plain jQuery reference returns undefined", function() {
      var $element;
      $element = $("<div/>");
      return equal($element.control(), undefined);
    });
    test("Utilities: cast: two control classes derive from same superclass", function() {
      var $a, $b, $c, $cast, $set, A, B, C;
      A = Control.subclass({
        className: "A"
      });
      B = A.subclass({
        className: "B"
      });
      C = A.subclass({
        className: "C"
      });
      $a = A.create();
      $b = B.create();
      $c = C.create();
      $set = Control("<div/>").append($b).append($a).append($c);
      $cast = $set.children().cast();
      return equal($cast instanceof A, true);
    });
    test("Utilities: cast: control and jQuery mix", function() {
      var $a, $cast, $set, A;
      A = Control.subclass({
        className: "A"
      });
      $a = A.create();
      $set = Control("<div/>").append($a).append($("<div/>"));
      $cast = $set.children().cast();
      return equal($cast instanceof Control, true);
    });
    test("Utilities: each", function() {
      var c, segments;
      c = $("<div>Ann</div><div>Bob</div>").control(Control);
      segments = c.each();
      ok(segments instanceof Array);
      equal(segments.length, 2);
      equal(segments[0].content(), "Ann");
      return equal(segments[1].content(), "Bob");
    });
    test("Utilities: eachControl", function() {
      var $bar, $c, $foo, Bar, Foo, results;
      Foo = Control.subclass({
        className: "Foo"
      });
      Foo.prototype.content = function() {
        return "foo";
      };
      $foo = Foo.create();
      Bar = Control.subclass({
        className: "Bar"
      });
      Bar.prototype.content = function() {
        return "bar";
      };
      $bar = Bar.create();
      $c = Control().add($foo).add($bar);
      results = [];
      $c.eachControl(function(index, $control) {
        return results.push($control.content());
      });
      return deepEqual(results, ["foo", "bar"]);
    });
    test("Utilities: referencedElement: Element function definition", function() {
      var $c;
      createGreetClass();
      $c = Greet.create();
      equal($c.$name().html(), "Ann");
      $c.$name().html("Bob");
      return equal($c.text(), "Hello Bob");
    });
    test("Utilities: referencedElement: Element functions $.end()-able", function() {
      var $c, $result;
      createGreetClass();
      $c = Greet.create();
      $result = $c.$name().end();
      equal($result, $c);
      ok($result instanceof Greet);
      return ok($c.$name() instanceof Control);
    });
    return test("Utilities: propertyVector", function() {
      var $a, $b, $c, vector;
      $a = Control.create({
        content: "one"
      });
      $b = Control.create({
        content: "two"
      });
      $c = $a.add($b);
      vector = $c.propertyVector("content");
      deepEqual(vector, ["one", "two"]);
      $c.propertyVector("content", ["un", "deux"]);
      equal($a.content(), "un");
      return equal($b.content(), "deux");
    });
  });

}).call(this);
