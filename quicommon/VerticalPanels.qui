<Control name="VerticalPanels">

<content>
    <div id="VerticalPanels_top" />
    <div id="VerticalPanels_content" />
    <div id="VerticalPanels_bottom" />
</content>

<style>
{
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /*
    Setting height when not in fill mode prevents resize logic from
    cylcing endlessly and shouldn't otherwise affect anything.
    */
    height: 100%;
    position: relative;
}
> * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: relative; /* So inner controls can be absolutely positioned within */
}

.VerticalPanels.fill {
    overflow-y: hidden;
    position: absolute;
    width: 100%;
}
.VerticalPanels.fill #VerticalPanels_content {
    overflow-y: auto;
}
</style>

<script>
VerticalPanels.prototype.extend({
    
    bottom: Control.bindTo("$VerticalPanels_bottom", "content"),
    content: Control.bindTo("$VerticalPanels_content", "content"),
    fill: Control.bindTo("applyClass/fill"),
    top: Control.bindTo("$VerticalPanels_top", "content"),
	
	initialize: function() {
        
        var self = this;
        
        // Ensure an initial resize happens after this instance is inserted into the DOM.
        var initialLayoutHandler = function() {
            console.log("initial layout");
            self._layout();
            $(document).unbind("DOMNodeInserted", initialLayoutHandler);
        };
        $(document).bind("DOMNodeInserted", initialLayoutHandler);
        
        // Recalc size whenever the window size changes.
        $(window).resize(function() {
            self._layout();
        });
	},
	
	_layout: function() {
	    var panelHeight = this.$VerticalPanels_top().outerHeight() + this.$VerticalPanels_bottom().outerHeight();
	    var availableHeight = this.height() - panelHeight;
	    this.$VerticalPanels_content().height(availableHeight);
	}
    
});
</script>

</Control>
