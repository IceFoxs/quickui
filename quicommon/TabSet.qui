<!--
A set of tabbed pages.

Each child of the content will be treated as a page. If the child has a function
called name(), that will be used as the name on the tab.
-->

<Control name="TabSet">

<content>
    <VerticalPanels fill="true">
        <top>
            <List id="tabButtons" itemClass="ButtonBase" />
        </top>
        <Switch id="TabSet_content"/>
    </VerticalPanels>
</content>

<style>
{
    position: relative;
}

#tabButtons {
    white-space: nowrap; /* So tabs don't wrap. */
}
</style>

<script>
TabSet.prototype.extend({

    content: Control.chain( "$TabSet_content", "content", function() { this._refresh(); } ),
    selectTabOnClick: Control.property.bool( null, true ),
    tabButtons: Control.chain( "$tabButtons", "children" ),
    selectedTab: Control.chain( "$TabSet_content", "activeChild" ),
    tabButtonClass: Control.chain( "$tabButtons", "itemClass", function() { this._refresh(); } ),
    tabs: Control.chain( "$TabSet_content", "children" ),
    
    initialize: function() {
        
        var self = this;
        this.$tabButtons().click( function( event ) {
            var tabButtonCssClass = "." + self.tabButtonClass().prototype.className;
            var tabButton = $( event.target ).closest( tabButtonCssClass ).control();
            if ( tabButton ) {
                var index = self.tabButtons().index( tabButton );
                if ( index >= 0 ) {
                    var tab = self.tabs()[ index ];
                    if ( self.selectTabOnClick() ) {
                        self.selectedTabIndex( index );
                    }
                }
            }
        });
        
        if ( this.tabs().length > 0 && !this.selectedTabIndex() ) {
            // Select first tab by default.
            this.selectedTabIndex(0);
        }
    },
    
    selectedTabIndex: Control.chain( "$TabSet_content", "activeIndex", function( index ) {
        this.tabButtons()
            .removeClass( "selected" )    // Deselect all tab buttons.
            .eq( index )
            .addClass( "selected" );      // Select the indicated button.
    }),

    _refresh: function() {
        if ( this.tabButtonClass() === undefined ) {
            return;
        }
        
        // Show the names for each tab as a button.
        var tabNames = this.tabs()
            .map( function( index, tab ) {
                var $tab = $( tab ).control();
                return ( $tab && $.isFunction( $tab.name ) )
                    ? $tab.name()
                    : "";
            })
            .get();
        this.$tabButtons().items( tabNames );
    }
});
</script>

</Control>
