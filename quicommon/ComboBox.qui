<!--
An input area with a dropdown arrow, which invokes a popup.
-->

<Control name="ComboBox">

<prototype>
    <HasPopup>
        <content>
            <div id="ComboBox_content"/>
            <ToggleButton id="dropdownButton">&#9660;</ToggleButton>
        </content>
    </HasPopup>
</prototype>

<style>
{
    display: inline-table;
}

#HasPopup_content > * {
    display: table-cell;
}

#ComboBox_content input[type='text'] {
    border: none;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    outline: none;
    padding: 2px;
}

#dropdownButton {
    text-align: center;
    vertical-align: middle;
}

/* Generic appearance */
.ComboBox.generic {
    border: 1px solid lightgray;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
.ComboBox.generic #HasPopup_popup {
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}
.ComboBox.generic #dropdownButton {
    border: none;
}
</style>

<script>
ComboBox.prototype.extend({
    
    content: Control.chain( "$ComboBox_content", "content" ),
    openOnFocus: Control.property.bool( null, true ),
    // TODO: Allow transmute to return the current class, replace this with a binding.
    textBoxClass: Control.property[ "class" ]( function( textBoxClass ) {
        this.$ComboBox_content().transmute( textBoxClass );
        this._bindInputEvents();
    }),
    
    initialize: function() {
        
        this._super();
        this.genericIfClassIs( ComboBox );
        
        var self = this;
        this.$HasPopup_popup().bind({
            "closed canceled": function() {
                self.$dropdownButton().toggleSelected( false );
            }
        });
        this.$dropdownButton().click( function() {
            self.open();
        });
        
        if ( !this.textBoxClass() ) {
            // Set a default text box class
            this.textBoxClass( TextBox );
        }
    },
    
    open: function() {
        
        if ( this.hasClass( "generic" ) ) {
            // Make popup at least as wide as content.
            this.eachControl( function( index, $control ) {
                var width = $control.outerWidth();
                this.$HasPopup_popup().css( "min-width", width + "px" );
            });
        }
        
        // User may have invoked popup by clicking in text box with
        // openOnFocus true, in which case we should ensure button looks
        // pressed while popup is open.
        this.$dropdownButton().toggleSelected( true );
        
        return this._super(); 
    },
    
    _bindInputEvents: function() {
        var self = this;
        this.$ComboBox_content().find( "input" ).bind({
            "blur": function() {
                if ( !self.opened() ) {
                    self.close();
                }
            },
            "focus": function() {
                if ( self.openOnFocus() ) {
                    self.open();
                }
            }
        });
    }

});
</script>

</Control>
