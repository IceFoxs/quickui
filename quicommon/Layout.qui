<!-- Base class for controls that want to do custom layout work when resized. -->

<Control name="Layout">

<script>
Layout.prototype.extend({
    
    initialize: function() {
        Layout.track(this);
    },
    
    // Base implementation does nothing.
    layout: function() {
        return this;
    },
    
    _log: function(s) {
        console.log(this.className + "#" + this.attr("id") + " " + s);
        return this;
    }
    
});

// Class methods.
// TODO: Most of this has been factored into the new insertedIntoDocument() event,
// so rewrite this to use that.
Layout.extend({
    
    /*
     * Re-layout any controls in the DOM.
     */
    recalc: function() {
        console.log("recalc");
        // Call the layout() method of any control whose size has changed.
        for (var i = 0, length = this._controlsToLayout.length; i < length; i++)
        {
            var $control = Control(this._controlsToLayout[i]).control();
            var previousSize = $control.data("_size"); 
            var size = {
                height: $control.height(),
                width: $control.width()
            };
            if (previousSize === undefined ||
                size.height != previousSize.height ||
                size.width != previousSize.width)
            {
                $control
                    .data("_size", size)
                    .layout();
            }
        }
    },
    
    /*
     * Start tracking the indicated controls for layout purposes.
     * We won't actually lay them out until they're added to the DOM.
     */
    track: function($controls) {
        $controls._log("tracking");
        this._initialize();
        $controls.insertedIntoDocument(function() {
            this.layout();
            Layout._controlsToLayout = Layout._controlsToLayout.concat(this);
        });
    },

    /* TODO: Allow a control to be stop being tracked for layout purposes.
    untrack: function($controls) {
        ...
        this.recalc();
    },
    */
    
    /*
     * Initialize layout engine overall (not a specific instance).
     */
    _initialize: function() {
        
        if (this._initialized)
        {
            // Already did this.
            return;
        }
        
        // The following control array is maintained in order such that
        // DOM parents come before their children. 
        this._controlsToLayout = [];
        
        // Recalc layout whenever the window size changes.
        $(window).resize(function() {
            Layout.recalc();
        });
        
        this._initialized = true;
    }
        
});
</script>

</Control>
