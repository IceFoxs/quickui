<!--
Base class for popups, menus, dialogs, things that appear temporarily over other things.
-->

<Control name="Popup">

<style>
{
	display: none;
	position: absolute;
	z-index: 1;
}

/* Generic appearance */
.Popup.generic {
    background: white;
    border: 1px solid gray;
    padding: .25em;
}
</style>

<script>
Popup.prototype.extend({

	blanket: Control.property(),
	blanketColor: Control.property(),
	blanketOpacity: Control.property(),
	cancelOnEscapeKey: Control.property.bool(null, true),
    cancelOnOutsideClick: Control.property.bool(null, true),
	closeOnInsideClick: Control.property.bool(),
	
	initialize: function()
	{
		var self = this;
        this
            .click(function() {
                if (self.closeOnInsideClick())
                {
                    self.close();
                }
            })
            .genericIfClassIs( Popup );
	},
	
    cancel: function() {
        return this
            .trigger("canceled")
            ._hidePopup();
    },
    
    close: function() {
        return this
            .trigger("closed")
            ._hidePopup();
    },

    open: function()
    {
        if (this.blanket() == null)
        {
            this.blanket(this._createBlanket());
        }
        
        /* Show control and blanket at the top of the Z-order. */
        var maximumZIndex = this._maximumZIndex();
        this.blanket()
            .css("z-index", maximumZIndex + 1)
            .show();
            
        this
            ._bindKeydownHandler(true)
            .css("z-index", maximumZIndex + 2)
            .show()
            .positionPopup()
            .trigger("opened");
            
        // In case the overlay wants to resize anything now that it's visible.
        Layout.recalc();
        
        return this;
    },
    
    // Subclasses should override this to position themselves.
    positionPopup: function() {
        return this;
    },
    
    _bindKeydownHandler: function(handleKeydown) {
        var handler;
        if (handleKeydown)
        {
            var self = this;
            handler = function(event) {
                if (self.cancelOnEscapeKey() && event.keyCode === 27 /* Escape */)
                {
                    self.cancel();
                }
            }
            this.data("_keydownHandler", handler);
            $(document).bind("keydown", handler);
        }
        else
        {
            handler = this.data("_keydownHandler");
            if (handler)
            {
                $(document).unbind("keydown", handler);
            }
        }
        return this;
    },

	_createBlanket: function() {
	    
		var $blanket = this
			.after("<div id='blanket'/>")
			.next();
			
        var cancelOnOutsideClick = this.cancelOnOutsideClick();
	    var color = this.blanketColor() ||
	                    (cancelOnOutsideClick ? false : "black");
	    var opacity = this.blanketOpacity() ||
                        (cancelOnOutsideClick ? 0.01 : 0.25);
			
		var self = this;
		$blanket
			.click(function() {
				if (self.cancelOnOutsideClick())
				{
					self.cancel();
				}
			})
			.css({
				cursor: "default",
				position: "fixed",
				opacity: opacity,
				top: 0,
				left: 0,
				width: "100%",
				height: "100%"
			});
        if (color)
        {
            $blanket.css("background-color", color);
        }
        
		return $blanket;
	},

    _hidePopup: function()
    {
        this
            ._bindKeydownHandler(false)
            .hide()
            .css("z-index", null); // No need to define Z-order any longer.
        if (this.blanket() != null)
        {
            this.blanket().remove();
            this.blanket(null);
        }
        
        return this;
    },

	/* Return the maximum Z-index in use by the page and its top-level controls. */
	_maximumZIndex: function()
	{
		var topLevelElements = $("body").children().andSelf();
		var zIndices = $.map(topLevelElements, function(element) {
			switch ($(element).css("position")) {
				case "absolute":
				case "fixed":
					var zIndex = parseInt($(element).css("z-index")) || 1;
					return zIndex;
			}
		});
		return Math.max.apply(null, zIndices);
	}
});
</script>

</Control>