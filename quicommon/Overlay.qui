<!-- Base class for controls like popups and dialogs that appear over other things. -->

<Control name="Overlay">

<style>
{
	display: none;
	position: absolute;
	z-index: 1;
}
</style>

<script>
Overlay.prototype.extend({

	$blanket: Control.property(),
	blanketColor: Control.property(),
	blanketOpacity: Control.property(),
	dismissOnInsideClick: Control.property.bool(),
	dismissOnOutsideClick: Control.property.bool(null, true),
	
	initialize: function()
	{
		var self = this;
		this.click(function() {
			if (self.dismissOnInsideClick())
			{
				self.hideOverlay();
			}
		});
	},
	
	closeOverlay: Control.method(function() {
	    this
	        .hideOverlay()
	        .remove();
	}),
	
	hideOverlay: Control.method(function()
	{
        this
			.hide()
			.css("z-index", null); // No need to define Z-order any longer.
		if (this.$blanket() != null)
		{
			this.$blanket().remove();
			this.$blanket(null);
		}
		
        this.trigger("overlayClosed");  // TODO: Rename to overlayHidden? Move trigger to closeOverlay?
	}),
	
	showOverlay: Control.method(function()
	{
		if (this.$blanket() == null)
		{
			this.$blanket(this._createBlanket());
		}
		
		/* Show control and blanket at the top of the Z-order. */
		var maximumZIndex = this._maximumZIndex();
		this.$blanket()
			.css("z-index", maximumZIndex + 1)
			.show();
		this
			.css("z-index", maximumZIndex + 2)
			.show()
			._positionOverlay()
			.trigger("overlayOpened");
	}),

	_createBlanket: function() {
	    
		var $blanket = this
			.after("<div id='blanket'/>")
			.next();
			
        var dismissOnOutsideClick = this.dismissOnOutsideClick();
	    var color = this.blanketColor() ||
	                    (dismissOnOutsideClick ? false : "black");
	    var opacity = this.blanketOpacity() ||
                        (dismissOnOutsideClick ? 0.01 : 0.25);
			
		var self = this;
		$blanket
			.click(function() {
				if (self.dismissOnOutsideClick())
				{
					self.hideOverlay();
				}
			})
			.css({
				cursor: "default",
				position: "fixed",
				opacity: opacity,
				top: 0,
				left: 0,
				width: "100%",
				height: "100%"
			});
        if (color)
        {
            $blanket.css("background-color", color);
        }
        
		return $blanket;
	},
		
	/* Return the maximum Z-index in use by the page and its top-level controls. */
	_maximumZIndex: function()
	{
		var topLevelElements = $("body").children().andSelf();
		var zIndices = $.map(topLevelElements, function(element) {
			switch ($(element).css("position")) {
				case "absolute":
				case "fixed":
					var zIndex = parseInt($(element).css("z-index")) || 1;
					return zIndex;
			}
		});
		return Math.max.apply(null, zIndices);
	},
	
	// Subclasses should override this to position themselves.
	_positionOverlay: Control.method(function() {})
});
</script>

</Control>